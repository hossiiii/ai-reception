[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ai-reception-backend"
version = "1.0.0"
description = "AI Reception System Backend API"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "AI Reception Team"}
]
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "langgraph>=0.0.55",
    "langchain-core>=0.1.0",
    "langchain-openai>=0.1.0",
    "openai>=1.3.0",
    "google-auth>=2.23.0",
    "google-auth-oauthlib>=1.1.0",
    "google-api-python-client>=2.108.0",
    "httpx>=0.25.0",
    "pydantic-settings>=2.0.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.12.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0"
]

[tool.ruff]
target-version = "py311"
line-length = 100

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # Pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "ARG002", # unused method argument
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["ARG", "S"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_optional = true
show_error_codes = true

# Third-party libraries without stubs
[[tool.mypy.overrides]]
module = [
    "google.*",
    "googleapiclient.*",
    "langgraph.*",
    "langchain_core.*",
    "langchain_openai.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-config",
    "--strict-markers",
]
markers = [
    "asyncio: mark test as async",
    "unit: mark test as unit test",
    "integration: mark test as integration test",
]